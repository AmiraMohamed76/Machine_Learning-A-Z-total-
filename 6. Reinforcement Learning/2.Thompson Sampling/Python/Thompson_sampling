#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 23 23:13:36 2020

@author: amiramohamed
"""
# Thompson Sampling

# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Importing dataset
dataset = pd.read_csv('Ads_CTR_Optimisation.csv')

# Implementing Thompson Sampling
import random
N = 10000
d = 10
ads_selected = []
numbers_of_rewards_1 = [0] * d
numbers_of_rewards_0 = [0] * d
total_reward = 0
for n in range(0, N):
    ad = 0
    max_random = 0
    for i in range(0,d):
        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)
        if random_beta > max_random:
            max_random = random_beta
            ad = i
    ads_selected.append(ad)
    reward = dataset.values[n, ad]
    if reward == 1:
        numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
    else:
        numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
    total_reward = total_reward + reward
        
    """  In this section we implement UBC By 
    1. define the number of around or users (N)
    2. define numbers of Ads (d) 
    3. create list 
    4. [0] * d this means create a vector of zeros for numbers_of_rewards_1[ad] ,numbers_of_rewards_0[ad]
    numbers_of_rewards_1[ad] means that we will update it by ad with reward = 1
    numbers_of_rewards_0[ad] means that we will update it by ad with reward = 0
    5. 1st for loop to check all around or users 
    6. initializing ad and max_random
    7. 2nd for loop to check all version of ads
    8. step to calculate betavariate of each version of ads 
    9. from previous step we calculate random_beta
    10. to get maximum random_beta we create max_random and compare it with random_beta and put max val in max_random
    11. then we add (ad) index of ads to ads_selected list
    12. get reward of each ad for each round
    13. update numbers_of_rewards_1
    14. update numbers_of_rewards_0
    15. update sums_of_rewards and total_reward  
    
    result of this section 
    when we open ads_selected we note that in the last some iteration
    the values of them is 4 is considered Ad5 is the best ad for users
    Thompson sampling is better than UCB because of total_reward is greater than UCB
    """
    
# Visualising the result
plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was seelected')
plt.show()   