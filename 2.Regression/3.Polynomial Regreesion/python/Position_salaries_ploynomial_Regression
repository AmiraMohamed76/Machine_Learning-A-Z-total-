#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Sep 19 14:32:33 2020

@author: amiramohamed
"""
# Ploynomial Linear Regression 

#Importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Importing dataset
dataset = pd.read_csv('Position_Salaries.csv')
#creating matrix with 3 features without last col
X = dataset.iloc[: , 1:2].values # X(Indepentant variable) must be matrix so we do that 1:2
y = dataset.iloc[: ,2].values  # y(Depentant variable) must be vector so we do that 1:2

# Splitting the dataset 
"""from sklearn.model_selection import train_test_split # we don't that because dataset is small
X_train,X_test,y_train,y_test = train_test_split(X, y, test_size =0.2 ,random_state =0)"""

# feature scaling 
"""from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.fit_transform(X_test)"""

# Fitting Linear Regression to the dataset
from sklearn.linear_model import LinearRegression
lin_regressor = LinearRegression()
lin_regressor.fit(X, y)

# Fitting polynomial Linear Regression to the dataset
from sklearn.preprocessing import PolynomialFeatures 
poly_regressor = PolynomialFeatures(degree = 4)
X_poly = poly_regressor.fit_transform(X)
""" In this section we create from X matrix new matrix called X_poly that has 
X ,X^2 ,X^3 ,X^4 and taking care of make X0 =1 """
lin_regressor_2 = LinearRegression()
lin_regressor_2.fit(X_poly ,y)
""" after making Polynomial regression we use Linear regression to fit it """

# Visualizing the linear regression result
plt.scatter(X, y, color ='red')
plt.plot(X,lin_regressor.predict(X), color ='blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position Levels')
plt.ylabel('Salary')
plt.show()
 
# Visualizing the Polynomial linear regression result
plt.scatter(X, y, color ='red')
plt.plot(X,lin_regressor_2.predict(poly_regressor.fit_transform(X)), color ='blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position Levels')
plt.ylabel('Salary')
plt.show()

# Predicting a new result with linear Regression
lin_regressor.predict(6.5)

# Predicting a new result with Polynomial Regression
lin_regressor_2.predict(poly_regressor.fit_transform(6.5))